buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        def plugins = rootProject.ext.plugins
        classpath plugins.retrolambda
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply from: '../config/quality.gradle'


android {
    def globalConfiguration = rootProject.extensions.getByName("ext")
    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        def environment = Boolean.valueOf(System.getenv().get("CI"))
        buildConfigField "boolean", "CI", environment.toString()

        applicationId globalConfiguration.getAt("androidApplicationId")
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
    }

    signingConfigs {
        release {
            try {
                storeFile file(KEYSTORE_FILE)
                storePassword KEYSTORE_PASSWORD
                keyAlias KEYSTORE_ALIAS
                keyPassword KEY_PASSWORD
            }
            catch (ex) {
                logger.error(ex.message)
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            jniDebuggable false
            zipAlignEnabled true
            buildConfigField "String", "host", "\"http://z.puk/\""
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            String isTravisBuild = System.getenv('TRAVIS')
            if (!Boolean.valueOf(isTravisBuild)) {
                signingConfig signingConfigs.release
            }
        }

        debug {
            buildConfigField "String", "host", "\"http://dema.im:8044/\""
            minifyEnabled false
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode true
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    retrolambda {
        jvmArgs '-noverify'
    }

    configurations {
        all*.exclude module: 'commons-logging'
        all*.exclude module: 'httpclient'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    def dependencies = rootProject.ext.dependencies

    compile dependencies.appcompat
    compile dependencies.design

    compile dependencies.rxJava
    compile dependencies.rxAndroid
    compile dependencies.rxLifecycle
    compile dependencies.rxLifecycleComponents

    compile dependencies.dagger
    apt dependencies.daggerCompiler

    //enable generate source for robolectric tests
    testCompile dependencies.dagger
    testCompile dependencies.daggerCompiler
    androidTestApt dependencies.daggerCompiler
    apt dependencies.daggerCompiler
    provided dependencies.javaxAnnotation
    compile dependencies.annimonStreams

    // disable leackcanary for unit tests & release build
    testCompile dependencies.leakCanaryNoOp
    debugCompile dependencies.leakCanary
    releaseCompile dependencies.leakCanaryNoOp
    testCompile dependencies.robolectric
    androidTestCompile dependencies.junit
    testCompile dependencies.junit
    testCompile 'org.robolectric:shadows-support-v4:3.1.4'

    compile project(':domain')
    compile project(':data')
}